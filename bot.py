import os
import asyncio
from threading import Thread
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("Please set environment variable BOT_TOKEN")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://english-bot-cew9.onrender.com/<–¢–û–ö–ï–ù>

app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# ====== –∫–æ–Ω—Ç–µ–Ω—Ç ======
lessons = {
    1: {"word": "apple", "translate": "—è–±–ª–æ–∫–æ", "example": "I eat an apple every day."},
    2: {"word": "book", "translate": "–∫–Ω–∏–≥–∞", "example": "This book is very interesting."},
    3: {"word": "dog", "translate": "—Å–æ–±–∞–∫–∞", "example": "The dog is barking."},
}

# ====== —Ö—ç–Ω–¥–ª–µ—Ä—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    param = context.args[0] if context.args else None
    text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç¬ª.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n/lesson ‚Äî —É—Ä–æ–∫ –¥–Ω—è\n/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n/archive ‚Äî –∞—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤\n/help ‚Äî –ø–æ–º–æ—â—å\n")
    if param:
        text += f"\n–¢—ã –ø—Ä–∏—à—ë–ª –ø–æ –¥–∏–ø–ª–∏–Ω–∫—É: {param} (–±–æ–Ω—É—Å—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ)"
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/lesson ‚Äî —É—Ä–æ–∫ –¥–Ω—è\n/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n/archive ‚Äî –∞—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤")

async def lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = (len(context.user_data) % len(lessons)) + 1
    data = lessons[idx]
    text = (f"üìò –£—Ä–æ–∫ –¥–Ω—è\n\n"
            f"–°–ª–æ–≤–æ: *{data['word']}*\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {data['translate']}\n"
            f"–ü—Ä–∏–º–µ—Ä: {data['example']}")
    await update.message.reply_text(text, parse_mode="Markdown")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = lessons[1]
    options = ["—è–±–ª–æ–∫–æ", "–∫–Ω–∏–≥–∞", "—Å–æ–±–∞–∫–∞", "–º–∞—à–∏–Ω–∞"]
    buttons = [[InlineKeyboardButton(opt, callback_data=f"quiz:{opt}")] for opt in options]
    await update.message.reply_text(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{data['word']}*?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons),
    )

async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    choice = q.data.split(":", 1)[1]
    correct = lessons[1]["translate"]
    await q.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ!" if choice == correct else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")

async def archive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìö –ê—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤:\n"
    for i, data in lessons.items():
        text += f"{i}. {data['word']} ‚Äî {data['translate']} ({data['example']})\n"
    text += "\n‚ö° –í –±—É–¥—É—â–µ–º —á–∞—Å—Ç—å –∞—Ä—Ö–∏–≤–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–º–∏—É–º."
    await update.message.reply_text(text)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(CommandHandler("lesson", lesson))
application.add_handler(CommandHandler("quiz", quiz))
application.add_handler(CallbackQueryHandler(quiz_answer, pattern=r"^quiz:"))
application.add_handler(CommandHandler("archive", archive))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# ====== –°–¢–ê–†–¢–£–ï–ú PTB-–î–í–ò–ñ–û–ö –í –§–û–ù–ï ======
def _ptb_worker():
    async def _run():
        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ù–û –±–µ–∑ polling/webhook-—Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –ø—Ä–∏—ë–º –¥–µ–ª–∞–µ—Ç Flask
        await application.initialize()
        await application.start()
        # –¥–µ—Ä–∂–∏–º —Ü–∏–∫–ª –∂–∏–≤—ã–º
        await asyncio.Event().wait()
    asyncio.run(_run())

Thread(target=_ptb_worker, daemon=True).start()

# ====== Flask endpoint –¥–ª—è Telegram ======
import asyncio

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä—è–º–æ –≤ event loop PTB
    asyncio.run_coroutine_threadsafe(
        application.process_update(update),
        application.loop
    )
    return "ok", 200

@app.get("/")
def health():
    return "ok", 200

# –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
