import os
import asyncio
from threading import Thread
from random import shuffle
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# === Config ===
TOKEN = os.getenv("BOT_TOKEN")  # –∑–∞–¥–∞–π—Ç–µ –Ω–∞ Render –≤–æ –≤–∫–ª–∞–¥–∫–µ Environment
if not TOKEN:
    raise RuntimeError("Please set environment variable BOT_TOKEN")

# === Flask (–¥–ª—è Render health-check) ===
app = Flask(__name__)

@app.get("/")
def health():
    # Render –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ web-—Å–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç 200
    return "ok", 200

# === Telegram Application ===
application = Application.builder().token(TOKEN).build()

# --- Sample lessons (—Ä–∞—Å—à–∏—Ä—è–π—Ç–µ) ---
lessons = {
    1: {"word": "apple", "translate": "—è–±–ª–æ–∫–æ", "example": "I eat an apple every day."},
    2: {"word": "book", "translate": "–∫–Ω–∏–≥–∞", "example": "This book is very interesting."},
    3: {"word": "dog", "translate": "—Å–æ–±–∞–∫–∞", "example": "The dog is barking."},
}

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    param = context.args[0] if context.args else None
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç¬ª.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/lesson ‚Äî —É—Ä–æ–∫ –¥–Ω—è\n"
        "/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/archive ‚Äî –∞—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
    )
    if param:
        text += f"\n–¢—ã –ø—Ä–∏—à—ë–ª –ø–æ –¥–∏–ø–ª–∏–Ω–∫—É: {param} (–±–æ–Ω—É—Å—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ)"
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/lesson ‚Äî —É—Ä–æ–∫ –¥–Ω—è\n/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n/archive ‚Äî –∞—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤"
    )

async def lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = (len(context.user_data) % len(lessons)) + 1
    data = lessons[idx]
    text = (
        f"üìò –£—Ä–æ–∫ –¥–Ω—è\n\n"
        f"–°–ª–æ–≤–æ: *{data['word']}*\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: {data['translate']}\n"
        f"–ü—Ä–∏–º–µ—Ä: {data['example']}"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = lessons[1]  # –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π
    options = ["—è–±–ª–æ–∫–æ", "–∫–Ω–∏–≥–∞", "—Å–æ–±–∞–∫–∞", "–º–∞—à–∏–Ω–∞"]
    shuffle(options)
    buttons = [[InlineKeyboardButton(opt, callback_data=f"quiz:{opt}")] for opt in options]
    await update.message.reply_text(
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{data['word']}*?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons),
    )

async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data.split(":", 1)[1]
    correct = lessons[1]["translate"]
    if choice == correct:
        await query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await query.edit_message_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")

async def archive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìö –ê—Ä—Ö–∏–≤ —É—Ä–æ–∫–æ–≤:\n"
    for i, data in lessons.items():
        tex
